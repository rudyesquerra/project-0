[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@3ac0a14b, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/HelloWorld.scala","languageId":"scala","version":1,"text":"import java.sql.DriverManager\r\nimport java.sql.Connection\r\nimport java.sql.SQLException\r\nimport java.sql.SQLTimeoutException\r\nimport java.sql.PreparedStatement\r\nimport java.io.FileReader\r\nimport java.io.BufferedReader\r\nimport java.io.FileNotFoundException\r\nimport scala.io.StdIn\r\n\r\nobject App {\r\n\r\n  val username = \"admin\"\r\n  val password = \"password\"\r\n\r\n  var connection:Connection = null\r\n\r\n  def main(args: Array[String]): Unit = {\r\n    //This application is a demo so the data is loaded into the database before user input is allowed for the simulation.\r\n\r\n    //Test Database connection\r\n    val connection_status = test_mysql_connection()\r\n    if(connection_status == 1) {\r\n      //Continue with program\r\n\r\n      //Load the data if empty\r\n      //load_books_to_db()\r\n\r\n      //Test connection with a simple query\r\n      //queryForBooksTest()\r\n\r\n      var finished = false\r\n\r\n      LibraryPrompter.printLoginPrompt()\r\n      do {\r\n        SpecialPrint.cprint(\"username>: \", Console.CYAN)\r\n        var input1 = StdIn.readLine()\r\n        SpecialPrint.cprint(\"password>: \", Console.CYAN)\r\n        var input2 = StdIn.readLine()\r\n        if(input1 == username && password == input2) {\r\n          finished = true\r\n        }\r\n        else {\r\n          SpecialPrint.cprintln(\"Invalid Credentials. Try again.\", Console.RED)\r\n        }\r\n\r\n      } while(!finished)\r\n\r\n      finished = false\r\n\r\n      LibraryPrompter.printWelcomeMessage()\r\n      LibraryPrompter.printHelp()\r\n      do {\r\n        SpecialPrint.cprint(\">: \", Console.CYAN)\r\n        var input = StdIn.readLine()\r\n        \r\n        input match {\r\n          case \"help\" => LibraryPrompter.printHelp()\r\n          case \"search\" => searchMenu();\r\n          case \"quit\" => finished = true\r\n          case _ => SpecialPrint.cprintln(\"Unexpected command: Type \\\"help\\\" to relist possible commands\", Console.YELLOW)\r\n        }\r\n\r\n      } while(!finished)\r\n\r\n      //Close the connection\r\n      connection.close()\r\n    }\r\n    SpecialPrint.cprintln(\"Closing program\", Console.BLUE)\r\n  }\r\n\r\n  def searchMenu(): Unit = {\r\n    LibraryPrompter.printSearchMenuPrompt()\r\n    var finished = false\r\n    do {\r\n        SpecialPrint.cprint(\"search_attribute>: \", Console.MAGENTA)\r\n        var input = StdIn.readLine()\r\n        \r\n        input match {\r\n          case \"title\" => queryDB(\"title\")\r\n          case \"author\" => queryDB(\"author\")\r\n          case \"genre\" => queryDB(\"genre\")\r\n          case \"publisher\" => queryDB(\"publisher\")\r\n          case \"help\" => LibraryPrompter.printSearchMenuHelp()\r\n          case \"back\" => finished = true\r\n          case _ => SpecialPrint.cprintln(\"Unexpected command: Type \\\"help\\\" to relist possible commands\", Console.YELLOW)\r\n        }\r\n\r\n      } while(!finished)\r\n\r\n  }\r\n\r\n  def queryDB(attr:String): Unit = {\r\n    SpecialPrint.cprint(attr + \">: \", Console.MAGENTA)\r\n    var input = StdIn.readLine()\r\n\r\n    try {\r\n      val sql = \"SELECT * FROM books WHERE \" + attr + \" LIKE \\\"%\" + input + \"%\\\"\"\r\n\r\n      // create the statement, and run the select query\r\n      val statement = connection.createStatement()\r\n      val resultSet = statement.executeQuery(sql)\r\n\r\n      if(resultSet.next() == false) {\r\n        SpecialPrint.cprintln(\"No results found.\", Console.YELLOW)\r\n      }\r\n      else {\r\n        do {\r\n          var title = resultSet.getString(\"title\")\r\n          var author = resultSet.getString(\"author\")\r\n          var genre = resultSet.getString(\"genre\")\r\n          var pages = resultSet.getString(\"pages\")\r\n          var publisher = resultSet.getString(\"publisher\")\r\n\r\n          println(\"Title: \" + title + \" | Author: \" + author + \" | Genre: \" + genre + \" | Pages: \" + pages + \" | Publisher: \" + publisher)\r\n        } while ( resultSet.next() )\r\n      }\r\n\r\n    }\r\n    catch {\r\n      case a: SQLException => try {connection.rollback()} catch {case e: SQLException => e.printStackTrace()}\r\n    } \r\n\r\n  }\r\n\r\n  def queryForBooksTest(): Unit = {\r\n    try {\r\n      val sql = \"SELECT * FROM books LIMIT 10\"\r\n\r\n      // create the statement, and run the select query\r\n      val statement = connection.createStatement()\r\n      val resultSet = statement.executeQuery(sql)\r\n\r\n      while ( resultSet.next() ) {\r\n        var title = resultSet.getString(\"title\")\r\n        var author = resultSet.getString(\"author\")\r\n        var genre = resultSet.getString(\"genre\")\r\n        var pages = resultSet.getString(\"pages\")\r\n        var publisher = resultSet.getString(\"publisher\")\r\n        println(\"Title: \" + title + \" | Author: \" + author + \" | Genre: \" + genre + \" | Pages: \" + pages + \" | Publisher: \" + publisher)\r\n      }\r\n    }\r\n    catch {\r\n      case a: SQLException => try {connection.rollback()} catch {case e: SQLException => e.printStackTrace()}\r\n    }\r\n  }\r\n\r\n  def test_mysql_connection(): Int = {\r\n\r\n    try {// connect to the database named \"demodatabase\" on the localhost\r\n      \r\n      val driver = \"com.mysql.cj.jdbc.Driver\"\r\n      // make the connection\r\n      Class.forName(driver).newInstance()\r\n      connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/demodatabase?\" + \"user=root&password=Ro93Jo98@\")\r\n      connection.setAutoCommit(false);\r\n\r\n      // create the statement, and run the select query\r\n      val statement = connection.createStatement()\r\n      val resultSet = statement.executeQuery(\"SELECT response FROM connection_test\")\r\n\r\n      while ( resultSet.next() ) {\r\n        val status = resultSet.getString(\"response\")\r\n        SpecialPrint.cprintln(\"Database Connection status = \" + status, Console.GREEN)\r\n      }\r\n\r\n      //Return a status code of 1 for successful connection\r\n      return 1;\r\n\r\n    } \r\n    catch {\r\n      case a: ClassNotFoundException => a.printStackTrace(); print_failure_message(\"Connection status = Failure\"); return 0;\r\n      case b: SQLException => b.printStackTrace(); print_failure_message(\"Connection status = Failure\"); return 0;\r\n      case c: SQLTimeoutException => c.printStackTrace(); print_failure_message(\"Connection status = Failure\"); return 0;\r\n    } \r\n    finally {\r\n      // Scala wants return statement within catch block\r\n    }\r\n    \r\n  }\r\n\r\n  def print_failure_message(error_message:String): Unit = {\r\n    SpecialPrint.cprintln(error_message, Console.RED)\r\n  }\r\n\r\n  def load_books_to_db(): Unit = {\r\n    var lineReader:BufferedReader = null\r\n    try {\r\n      connection.setAutoCommit(false); // To run multiple statements\r\n      lineReader = new BufferedReader(new FileReader(\"books_updated.csv\"))\r\n      lineReader.readLine() // Skip the first line w/ the list of column names\r\n\r\n      var lineText:String = lineReader.readLine() // If the variable is null i.e. empty file then the queries wont run\r\n      val sql = \"INSERT INTO books (title, author, genre, pages, publisher) VALUES (?, ?, ?, ?, ?)\"\r\n      var statement:PreparedStatement = connection.prepareStatement(sql)\r\n\r\n      println(\"Attempting queuries...\")\r\n\r\n      val batchSize = 20\r\n      var count = 0\r\n\r\n      while(lineText != null) {\r\n        var data = lineText.split(\",\")\r\n        lineText = lineReader.readLine()\r\n        var title = data(0)\r\n        var author = data(1)\r\n        var genre = data(2)\r\n        var pages = data(3).toInt\r\n        var publisher = data(4)\r\n\r\n        //Build statement (query)\r\n        statement.setString(1, title)\r\n        statement.setString(2, author)\r\n        statement.setString(3, genre)\r\n        statement.setInt(4, pages)\r\n        statement.setString(5, publisher)\r\n\r\n        statement.addBatch()\r\n        if(count % batchSize == 0) {\r\n          statement.executeBatch()\r\n        }\r\n        \r\n      }\r\n\r\n      lineReader.close()\r\n\r\n      // execute the remaining queries\r\n      statement.executeBatch();\r\n \r\n      connection.commit();\r\n\r\n    }\r\n    catch {\r\n      case a: FileNotFoundException => a.printStackTrace(); print_failure_message(\"Requested file not found.\");\r\n      case b: SQLException => try {connection.rollback()} catch {case e: SQLException => e.printStackTrace()}\r\n    }\r\n\r\n  }\r\n\r\n}// EOF"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/App.scala","languageId":"scala","version":5,"text":"import java.sql.DriverManager\r\nimport java.sql.Connection\r\nimport java.sql.SQLException\r\nimport java.sql.SQLTimeoutException\r\nimport java.sql.PreparedStatement\r\nimport java.io.FileReader\r\nimport java.io.BufferedReader\r\nimport java.io.FileNotFoundException\r\nimport scala.io.StdIn\r\n\r\nobject App {\r\n\r\n  val username = \"admin\"\r\n  val password = \"password\"\r\n\r\n  var connection:Connection = null\r\n\r\n  def main(args: Array[String]): Unit = {\r\n    //This application is a demo so the data is loaded into the database before user input is allowed for the simulation.\r\n\r\n    //Test Database connection\r\n    val connection_status = test_mysql_connection()\r\n    if(connection_status == 1) {\r\n      //Continue with program\r\n\r\n      //Load the data if empty\r\n      //load_books_to_db()\r\n\r\n      //Test connection with a simple query\r\n      //queryForBooksTest()\r\n\r\n      var finished = false\r\n\r\n      LibraryPrompter.printLoginPrompt()\r\n      do {\r\n        SpecialPrint.cprint(\"username>: \", Console.CYAN)\r\n        var input1 = StdIn.readLine()\r\n        SpecialPrint.cprint(\"password>: \", Console.CYAN)\r\n        var input2 = StdIn.readLine()\r\n        if(input1 == username && password == input2) {\r\n          finished = true\r\n        }\r\n        else {\r\n          SpecialPrint.cprintln(\"Invalid Credentials. Try again.\", Console.RED)\r\n        }\r\n\r\n      } while(!finished)\r\n\r\n      finished = false\r\n\r\n      LibraryPrompter.printWelcomeMessage()\r\n      LibraryPrompter.printHelp()\r\n      do {\r\n        SpecialPrint.cprint(\">: \", Console.CYAN)\r\n        var input = StdIn.readLine()\r\n        \r\n        input match {\r\n          case \"help\" => LibraryPrompter.printHelp()\r\n          case \"search\" => searchMenu();\r\n          case \"quit\" => finished = true\r\n          case _ => SpecialPrint.cprintln(\"Unexpected command: Type \\\"help\\\" to relist possible commands\", Console.YELLOW)\r\n        }\r\n\r\n      } while(!finished)\r\n\r\n      //Close the connection\r\n      connection.close()\r\n    }\r\n    SpecialPrint.cprintln(\"Closing program\", Console.BLUE)\r\n  }\r\n\r\n  def searchMenu(): Unit = {\r\n    LibraryPrompter.printSearchMenuPrompt()\r\n    var finished = false\r\n    do {\r\n        SpecialPrint.cprint(\"search_attribute>: \", Console.MAGENTA)\r\n        var input = StdIn.readLine()\r\n        \r\n        input match {\r\n          case \"title\" => queryDB(\"title\")\r\n          case \"author\" => queryDB(\"author\")\r\n          case \"genre\" => queryDB(\"genre\")\r\n          case \"publisher\" => queryDB(\"publisher\")\r\n          case \"help\" => LibraryPrompter.printSearchMenuHelp()\r\n          case \"back\" => finished = true\r\n          case _ => SpecialPrint.cprintln(\"Unexpected command: Type \\\"help\\\" to relist possible commands\", Console.YELLOW)\r\n        }\r\n\r\n      } while(!finished)\r\n\r\n  }\r\n\r\n  def queryDB(attr:String): Unit = {\r\n    SpecialPrint.cprint(attr + \">: \", Console.MAGENTA)\r\n    var input = StdIn.readLine()\r\n\r\n    try {\r\n      val sql = \"SELECT * FROM books WHERE \" + attr + \" LIKE \\\"%\" + input + \"%\\\"\"\r\n\r\n      // create the statement, and run the select query\r\n      val statement = connection.createStatement()\r\n      val resultSet = statement.executeQuery(sql)\r\n\r\n      if(resultSet.next() == false) {\r\n        SpecialPrint.cprintln(\"No results found.\", Console.YELLOW)\r\n      }\r\n      else {\r\n        do {\r\n          var title = resultSet.getString(\"title\")\r\n          var author = resultSet.getString(\"author\")\r\n          var genre = resultSet.getString(\"genre\")\r\n          var pages = resultSet.getString(\"pages\")\r\n          var publisher = resultSet.getString(\"publisher\")\r\n\r\n          println(\"Title: \" + title + \" | Author: \" + author + \" | Genre: \" + genre + \" | Pages: \" + pages + \" | Publisher: \" + publisher)\r\n        } while ( resultSet.next() )\r\n      }\r\n\r\n    }\r\n    catch {\r\n      case a: SQLException => try {connection.rollback()} catch {case e: SQLException => e.printStackTrace()}\r\n    } \r\n\r\n  }\r\n\r\n  def queryForBooksTest(): Unit = {\r\n    try {\r\n      val sql = \"SELECT * FROM books LIMIT 10\"\r\n\r\n      // create the statement, and run the select query\r\n      val statement = connection.createStatement()\r\n      val resultSet = statement.executeQuery(sql)\r\n\r\n      while ( resultSet.next() ) {\r\n        var title = resultSet.getString(\"title\")\r\n        var author = resultSet.getString(\"author\")\r\n        var genre = resultSet.getString(\"genre\")\r\n        var pages = resultSet.getString(\"pages\")\r\n        var publisher = resultSet.getString(\"publisher\")\r\n        println(\"Title: \" + title + \" | Author: \" + author + \" | Genre: \" + genre + \" | Pages: \" + pages + \" | Publisher: \" + publisher)\r\n      }\r\n    }\r\n    catch {\r\n      case a: SQLException => try {connection.rollback()} catch {case e: SQLException => e.printStackTrace()}\r\n    }\r\n  }\r\n\r\n  def test_mysql_connection(): Int = {\r\n\r\n    try {// connect to the database named \"demodatabase\" on the localhost\r\n      \r\n      val driver = \"com.mysql.cj.jdbc.Driver\"\r\n      // make the connection\r\n      Class.forName(driver).newInstance()\r\n      //connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/demodatabase?\" + \"user=root&password=Ro93Jo98@\")\r\n      //connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/demodatabase?\" + \"user=root&password=Ro93Jo98@\")\r\n      connection.setAutoCommit(false);\r\n\r\n      // create the statement, and run the select query\r\n      val statement = connection.createStatement()\r\n      val resultSet = statement.executeQuery(\"SELECT response FROM connection_test\")\r\n\r\n      while ( resultSet.next() ) {\r\n        val status = resultSet.getString(\"response\")\r\n        SpecialPrint.cprintln(\"Database Connection status = \" + status, Console.GREEN)\r\n      }\r\n\r\n      //Return a status code of 1 for successful connection\r\n      return 1;\r\n\r\n    } \r\n    catch {\r\n      case a: ClassNotFoundException => a.printStackTrace(); print_failure_message(\"Connection status = Failure\"); return 0;\r\n      case b: SQLException => b.printStackTrace(); print_failure_message(\"Connection status = Failure\"); return 0;\r\n      case c: SQLTimeoutException => c.printStackTrace(); print_failure_message(\"Connection status = Failure\"); return 0;\r\n    } \r\n    finally {\r\n      // Scala wants return statement within catch block\r\n    }\r\n    \r\n  }\r\n\r\n  def print_failure_message(error_message:String): Unit = {\r\n    SpecialPrint.cprintln(error_message, Console.RED)\r\n  }\r\n\r\n  def load_books_to_db(): Unit = {\r\n    var lineReader:BufferedReader = null\r\n    try {\r\n      connection.setAutoCommit(false); // To run multiple statements\r\n      lineReader = new BufferedReader(new FileReader(\"books_updated.csv\"))\r\n      lineReader.readLine() // Skip the first line w/ the list of column names\r\n\r\n      var lineText:String = lineReader.readLine() // If the variable is null i.e. empty file then the queries wont run\r\n      val sql = \"INSERT INTO books (title, author, genre, pages, publisher) VALUES (?, ?, ?, ?, ?)\"\r\n      var statement:PreparedStatement = connection.prepareStatement(sql)\r\n\r\n      println(\"Attempting queuries...\")\r\n\r\n      val batchSize = 20\r\n      var count = 0\r\n\r\n      while(lineText != null) {\r\n        var data = lineText.split(\",\")\r\n        lineText = lineReader.readLine()\r\n        var title = data(0)\r\n        var author = data(1)\r\n        var genre = data(2)\r\n        var pages = data(3).toInt\r\n        var publisher = data(4)\r\n\r\n        //Build statement (query)\r\n        statement.setString(1, title)\r\n        statement.setString(2, author)\r\n        statement.setString(3, genre)\r\n        statement.setInt(4, pages)\r\n        statement.setString(5, publisher)\r\n\r\n        statement.addBatch()\r\n        if(count % batchSize == 0) {\r\n          statement.executeBatch()\r\n        }\r\n        \r\n      }\r\n\r\n      lineReader.close()\r\n\r\n      // execute the remaining queries\r\n      statement.executeBatch();\r\n \r\n      connection.commit();\r\n\r\n    }\r\n    catch {\r\n      case a: FileNotFoundException => a.printStackTrace(); print_failure_message(\"Requested file not found.\");\r\n      case b: SQLException => try {connection.rollback()} catch {case e: SQLException => e.printStackTrace()}\r\n    }\r\n\r\n  }\r\n\r\n}// EOF"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\William Terry\Desktop\BigDataOctober2021\ScalaDBDemo\target\scala-2.11\zinc\inc_compile_2.11.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 1 s, completed Oct 20, 2021 12:54:26 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/App.scala"},"position":{"line":155,"character":48}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:       connection.setAutoCommit(false);[0m
[0m[[0m[0minfo[0m] [0m[0mSymbol not found in definition request {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/App.scala"},"position":{"line":155,"character":48}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/App.scala"},"position":{"line":155,"character":119}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:       connection.setAutoCommit(false);[0m
[0m[[0m[0minfo[0m] [0m[0mSymbol not found in definition request {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/App.scala"},"position":{"line":155,"character":119}}[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/LibraryPrompter.scala","languageId":"scala","version":1,"text":"object LibraryPrompter {\r\n\r\n  def printLoginPrompt(): Unit = {\r\n    SpecialPrint.cprintln(\"___________\", Console.CYAN)\r\n    SpecialPrint.cprintln(\"Rev Library\", Console.CYAN, Console.UNDERLINED)\r\n  }\r\n\r\n  def printWelcomeMessage(): Unit = {\r\n    SpecialPrint.cprintln(\"***********************************************\", Console.CYAN)\r\n    SpecialPrint.cprintln(\"Welcome back to the Rev Library Lookup. You can search for books within our library. Listed below are your available commands:\", Console.CYAN)\r\n    SpecialPrint.cprintln(\"***********************************************\", Console.CYAN)\r\n  }\r\n\r\n  def printHelp(): Unit = {\r\n    SpecialPrint.cprintln(\"Available commands:\" + \"\\nhelp\" + \"\\nsearch\" + \"\\nquit\", Console.CYAN)\r\n  }\r\n\r\n  def printSearchMenuPrompt(): Unit = {\r\n    SpecialPrint.cprintln(\"Search for books based on one of the four attributes: title, author, genre, or publisher\", Console.MAGENTA)\r\n    printSearchMenuHelp()\r\n  }\r\n\r\n  def printSearchMenuHelp(): Unit = {\r\n    SpecialPrint.cprintln(\"Available commands:\" + \"\\ntitle\" + \"\\nauthor\" + \"\\ngenre\" + \"\\npublisher\" + \"\\nhelp\" + \"\\nback\", Console.MAGENTA)\r\n    print(\"\\n\")\r\n    printSearchMenuExample()\r\n  }\r\n\r\n  def printSearchMenuExample(): Unit = {\r\n    SpecialPrint.cprintln(\"Example Search:\", Console.MAGENTA, Console.UNDERLINED)\r\n    SpecialPrint.cprintln(\"search_attribute>: title\", Console.MAGENTA)\r\n    SpecialPrint.cprintln(\"title>: Data Smart\", Console.MAGENTA)\r\n    SpecialPrint.cprintln(\"\\nResults:\", Console.MAGENTA, Console.UNDERLINED)\r\n    SpecialPrint.cprintln(\"Title: Data Smart | Author: John Foreman | Genre: data_science | Pages: 235 | Publisher: Wiley\", Console.MAGENTA)\r\n  }\r\n\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/LibraryPrompter.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/SpecialPrint.scala","languageId":"scala","version":1,"text":"object SpecialPrint {\r\n  def cprintln(s: String, color:String, alter:String = Console.RESET): Unit = {\r\n    print(alter)\r\n    print(color)\r\n    print(s)\r\n    print(Console.RESET + \"\\n\")\r\n  }\r\n\r\n  def cprint(s: String, color:String = Console.WHITE, alter:String = Console.RESET): Unit = {\r\n    print(alter)\r\n    print(color)\r\n    print(s)\r\n    print(Console.RESET)\r\n  }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/William%20Terry/Desktop/BigDataOctober2021/ScalaDBDemo/src/main/scala/SpecialPrint.scala"}})[0m
